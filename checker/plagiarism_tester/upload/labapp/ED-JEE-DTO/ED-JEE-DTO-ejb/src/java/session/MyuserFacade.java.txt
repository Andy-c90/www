/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package session;

import entity.Myuser;
import entity.MyuserDTO;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author yuand
 */
@Stateless
public class MyuserFacade implements MyuserFacadeRemote {

    @PersistenceContext(unitName = "ED-JEE-DTO-ejbPU")
    private EntityManager em;

    protected EntityManager getEntityManager() {
        return em;
    }

    private void create(Myuser myuser) {
        em.persist(myuser);
    }

    private void edit(Myuser myuser) {
        em.merge(myuser);
    }

    private void remove(Myuser myuser) {
        em.remove(em.merge(myuser));
    }

    private Myuser find(Object id) {
        return em.find(Myuser.class, id);
    }

    private List<Myuser> recordsbyaddress(Object address) {
        return em.createNamedQuery("Myuser.findByAddress").setParameter("address", address).getResultList();
    }

    // Add business logic below. (Right-click in editor and choose
    // "Insert Code > Add Business Method")
    @Override
    public boolean createRecord(MyuserDTO myuserDTO) {
        if (find(myuserDTO.getUserid()) != null) {
            // user whose userid can be found  
            return false;
        }

// user whose userid could not be found 
        try {
            Myuser myuser = this.myDTO2DAO(myuserDTO);
            this.create(myuser);    // add to database 
            return true;
        } catch (Exception ex) {
            return false; // something is wrong, should not be here though 
        }

    }

    private Myuser myDTO2DAO(MyuserDTO myuserDTO) {
        Myuser myuser = new Myuser();
        myuser.setUserid(myuserDTO.getUserid());
        myuser.setName(myuserDTO.getName());
        myuser.setPassword(myuserDTO.getPassword());
        myuser.setEmail(myuserDTO.getEmail());
        myuser.setPhone(myuserDTO.getPhone());
        myuser.setAddress(myuserDTO.getAddress());
        myuser.setSecqn(myuserDTO.getSecQn());
        myuser.setSecans(myuserDTO.getSecAns());
        return myuser;
    }

    private MyuserDTO myDAO2DTO(Myuser myuser) {
        MyuserDTO myuserDTO = new MyuserDTO(myuser.getUserid(), myuser.getName(), myuser.getPassword(),
                myuser.getEmail(), myuser.getPhone(), myuser.getAddress(), myuser.getSecqn(), myuser.getSecans());
        return myuserDTO;
    }

    @Override
    public MyuserDTO getRecord(String userId) {
        if (find(userId) != null) {
            Myuser myuser = new Myuser();
            myuser = find(userId);
            MyuserDTO myuserDTO = myDAO2DTO(myuser);
            return myuserDTO;
        }
        return null;
    }

    @Override
    public boolean updateRecord(MyuserDTO myuserDTO) {
        String userid = myuserDTO.getUserid();

        try {
            if (find(userid) != null) {
                Myuser myuser = this.myDTO2DAO(myuserDTO);
                this.edit(myuser);
                return true;
            }
        } catch (Exception ex) {
            throw ex;
        }

        return false;
    }

    @Override
    public boolean deleteRecord(String userId) {
        if (find(userId) != null) {
            Myuser myuser = new Myuser();
            myuser = find(userId);
            this.remove(myuser);
            return true;
        }
        return false;
    }

    /**
     *
     * @param address
     * @return
     */
    @Override
    public ArrayList<MyuserDTO> getRecordsByAddress(String address) {

        try {
            javax.persistence.Query query;
            query = em.createNamedQuery("Myuser.findByAddress").setParameter("address", address);
            List<Myuser> daoList = query.getResultList();
           

            if (daoList != null) {
                ArrayList<MyuserDTO> List = new ArrayList<MyuserDTO>();
                for (int i = 0; i < daoList.size(); i++) {
                    Myuser myuser = daoList.get(i);
                    MyuserDTO myuserDTO = myDAO2DTO(myuser);
                    List.add(myuserDTO);
                }
                return List;
            }
            return null;
        } catch (Exception ex) {
            throw ex;
        }

    }
}
